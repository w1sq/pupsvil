import asyncio
from aiogram import Bot, Dispatcher,types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from gsheets import Google_Sheets
from db.__all_models import Users, Notifications, Limits
from db.db_session import global_init, create_session
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import aiogram
from config import tg_bot_token
from datetime import datetime,timedelta
import aioschedule as schedule
from aiogram.dispatcher.filters.state import State, StatesGroup
menu_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).row(KeyboardButton('–¢–æ–≤–∞—Ä—ã'),KeyboardButton('–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã'))\
    .row(KeyboardButton('–ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è'), KeyboardButton('–ü–æ—Å—Ç–∞–≤–∫–∏'), KeyboardButton('–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥')).row(KeyboardButton('Road Map'),KeyboardButton('–û—Ç–∑—ã–≤—ã'),KeyboardButton('–ü–ª–∞—Ç–µ–∂–∏'))\
        .row(KeyboardButton('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'),KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ'),(KeyboardButton('–ö–æ–Ω–≤–µ—Ä—Å–∏—è')))

class Answer(StatesGroup):
    review_answer = State()

class GetLimitAmount(StatesGroup):
    limit_amount = State()

google_sheets = Google_Sheets()
bot = Bot(token=tg_bot_token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

global_init()

@dp.message_handler(commands=['file'])
async def send_file(message=''):
    with open('main.py', 'rb') as f:
        await message.reply_document(f)

@dp.message_handler(commands=['start'])
async def start(message):
    password = message.text.split()[-1]
    if password == 'semi':
        db_sess = create_session()
        user = db_sess.query(Users).get(message.chat.id)
        if not user:
            user = Users(
                id = message.chat.id
            )
            db_sess.add(user)
            db_sess.commit()
            db_sess.close()
        await message.answer('–ú–µ–Ω—é',reply_markup = menu_keyboard)

@dp.message_handler(commands=['users'])
async def users(message):
    db_sess = create_session()
    users = db_sess.query(Users).all()
    db_sess.close()
    text = ''
    for user in users:
        text += str(user)+"\n"
    await message.answer(text)

async def main_menu(call):
    await call.message.answer('–í—ã –≤ –º–µ–Ω—é',reply_markup = menu_keyboard)

@dp.message_handler(commands=['send_message'])
async def send_message(message):
    text = ' '.join(message.text.split()[1:])
    db_sess = create_session()
    users = db_sess.query(Users).all()
    db_sess.close()
    for user in users:
        try:
            await bot.send_message(user.id, text)
        except (aiogram.utils.exceptions.ChatNotFound, aiogram.utils.exceptions.MessageTextIsEmpty, aiogram.utils.exceptions.BotBlocked):
            pass

@dp.message_handler(text='–û—Ç–∑—ã–≤—ã')
async def send_reviews(message):
    global local_reviews
    await bot.send_chat_action(message.chat.id,'typing')
    reviews = google_sheets.get_reviews()
    if reviews:
        for review in reviews:
            answer_keyboard = InlineKeyboardMarkup(one_time_keyboard=True).row(InlineKeyboardButton(text='–í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç', callback_data=f'answer_review {review[1]}'))
            await message.answer(review[0], reply_markup=answer_keyboard)
    else:
        await message.answer('–ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ')

@dp.message_handler(text='–ö–æ–Ω–≤–µ—Ä—Å–∏—è')
async def send_conversion(message):
    await bot.send_chat_action(message.chat.id,'typing')
    await message.answer(google_sheets.get_conversions())

@dp.message_handler(text='–¢–æ–≤–∞—Ä—ã')
async def send_items(message):
    keyb= InlineKeyboardMarkup()
    for product_id in range(len(google_sheets.products)):
        keyb.add(InlineKeyboardButton(text=google_sheets.products[product_id],callback_data=f'show_product |{product_id}'))
    keyb.add(InlineKeyboardButton(text='–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã',callback_data=f'show_product |all'))
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:',reply_markup=keyb)

async def show_product(call):
    product_id = call.data.split('|')[1]
    await bot.send_chat_action(call.message.chat.id,'typing')
    if product_id =='all':
        for product in google_sheets.keys_coords.keys():
            await call.message.answer(google_sheets.get_item(product))
    else:
        await call.message.answer(google_sheets.get_item(google_sheets.products[int(product_id)]))

@dp.message_handler(text='–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã')
async def send_markets(message):
    keyb= InlineKeyboardMarkup()
    for marketplace in google_sheets.marketplaces:
        keyb.add(InlineKeyboardButton(text=marketplace,callback_data=f'show_marketplace |{marketplace}'))
    keyb.add(InlineKeyboardButton(text='–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ',callback_data=f'show_marketplace |all'))
    await message.answer('–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã:',reply_markup=keyb)

async def show_marketplace(call):
    name = call.data.split('|')[1]
    await bot.send_chat_action(call.message.chat.id,'typing')
    if name =='all': 
        for marketplace in google_sheets.marketplaces:
            messages = google_sheets.get_marketplace(marketplace)
            for message in messages:
                await call.message.answer(message)
    else:
        messages = google_sheets.get_marketplace(name)
        for message in messages:
            await call.message.answer(message)


@dp.message_handler(text='–ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è')
async def send_crossplatform(message):
    await bot.send_chat_action(message.chat.id,'typing')
    await message.answer(google_sheets.get_crossplatform())

@dp.message_handler(text='–ü–æ—Å—Ç–∞–≤–∫–∏')
async def send_supplies(message):
    supplies_keyb = InlineKeyboardMarkup().row(InlineKeyboardButton(text='–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ Wildberries',callback_data='regional wb'))\
        .row(InlineKeyboardButton(text='–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ OZON', callback_data='regional ozon'))\
            .row(InlineKeyboardButton('–õ–∏–º–∏—Ç—ã Wb', callback_data='limits_wb'))
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', reply_markup=supplies_keyb)

@dp.message_handler(text='–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥')
async def send_marketing(message):
    await bot.send_chat_action(message.chat.id,'typing')
    await message.answer(google_sheets.get_marketing())

@dp.message_handler(text='Road Map')
async def send_roadmap(message):
    await bot.send_chat_action(message.chat.id,'typing')
    await message.answer(google_sheets.get_roadmap())

@dp.message_handler(text='–ü–ª–∞—Ç–µ–∂–∏')
async def send_bills(message):
    await bot.send_chat_action(message.chat.id,'typing')
    await message.answer(google_sheets.get_bills())

@dp.message_handler(text='–ó–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ')
async def write_data(message):
    await bot.send_chat_action(message.chat.id,'typing')
    google_sheets.write_data()
    await message.answer('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã')

@dp.message_handler(text='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
async def send_notifications(message):
    db_sess = create_session()
    user = db_sess.query(Users).get(message.chat.id)
    notifications = db_sess.query(Notifications).all()
    if notifications:
        for notification in notifications:
            reply_markup = InlineKeyboardMarkup()
            if '–∑–∞–∫–∞–∑–∞—Ç—å' in notification.text:
                if str(notification.id) in user.muted_notifications:
                    reply_markup.add(InlineKeyboardButton(text='üîï',callback_data=f'unmutenotification {notification.id} {user.id}'))
                else:
                    reply_markup.add(InlineKeyboardButton(text='üîî',callback_data=f'mutenotification {notification.id} {user.id}'))
            reply_markup.add(InlineKeyboardButton(text='‚ùå',callback_data=f'deletenotification {notification.id}'))
            await message.answer(f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç {notification.date_added.strftime("%d.%m.%Y")}\n' + notification.text, reply_markup=reply_markup)
    else:
        await message.answer('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç')
    db_sess.close()

async def unmutenotification(call):
    notification_id = call.data.split()[1]
    user_id = call.data.split()[2]
    db_sess = create_session()
    user = db_sess.query(Users).get(user_id)
    reply_markup = InlineKeyboardMarkup().add(InlineKeyboardButton(text='üîî',callback_data=f'mutenotification {notification_id} {user_id}'))
    await bot.edit_message_reply_markup(chat_id=call.message.chat.id,message_id=call.message.message_id,reply_markup=reply_markup)
    user.muted_notifications.replace(notification_id,'')
    db_sess.commit()
    db_sess.close()

async def deletenotification(call):
    notification_id = call.data.split()[1]
    db_sess = create_session()
    users = db_sess.query(Users).all()
    for user in users:
        user.muted_notifications.replace(notification_id,'')
    notification = db_sess.query(Notifications).get(notification_id)
    db_sess.delete(notification)
    await call.answer('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ')
    await call.message.delete()
    db_sess.commit()
    db_sess.close()

async def mutenotification(call):
    notification_id = call.data.split()[1]
    user_id = call.data.split()[2]
    db_sess = create_session()
    reply_markup = InlineKeyboardMarkup().add(InlineKeyboardButton(text='üîï',callback_data=f'unmutenotification {notification_id} {user_id}'))
    await bot.edit_message_reply_markup(chat_id=call.message.chat.id,message_id=call.message.message_id,reply_markup=reply_markup)
    user = db_sess.query(Users).get(user_id)
    user.muted_notifications += f' {notification_id}'
    db_sess.commit()
    db_sess.close()

async def answer_review(call):
    await call.message.answer('–ë–ª–∞–≥–æ–¥–∞—Ä—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ—Ç–≤–µ—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º')
    await Answer.review_answer.set()
    current_state = dp.get_current().current_state()
    await current_state.update_data(answer_id=call.data.split()[1])

@dp.message_handler(state=Answer.review_answer)
async def process_answer(message: types.Message, state):
    state_data = await state.get_data()
    await state.finish()
    review_text = google_sheets.get_review_by_appeal_num(state_data['answer_id'])
    confirm_keyboard = InlineKeyboardMarkup(one_time_keyboard=True).row(InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=f"confirm_answer {state_data['answer_id']}"))
    await message.answer(f"–°—É–ø–µ—Ä! –Ø –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å —Å–æ–∑–¥–∞–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ Wildberries –Ω–∞ —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤:\n\n{review_text}\n\n‚Ä¶—Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ–∫—Å—Ç–æ–º:\n\n{message.text}", reply_markup=confirm_keyboard)
    
async def confirm_answer(call):
    answer_id = call.data.split()[1]
    answer = call.message.text.split('\n\n')[3]
    google_sheets.send_answer(answer_id, answer)
    await call.message.answer('–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–æ—Å–ª–∞–Ω–æ')

async def review_delete_success(call):
    google_sheets.change_review_status(call.data.split()[1], '—É–¥–∞–ª—ë–Ω')
    await call.message.answer('–£—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞.')

async def review_help_needed(call):
    google_sheets.change_review_status(call.data.split()[1], '–Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å')
    await call.message.answer('–°—Ç–∞—Ç—É—Å —Å–º–µ–Ω–µ–Ω –Ω–∞ "–Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å".')

async def regional(call):
    platform = call.data.split()[1]
    await call.message.answer(google_sheets.get_regional(platform))

async def limits(call):
    platform = call.data.split()[1]
    await call.message.answer(google_sheets.get_limits(platform))

async def limits_wb(call):
    db_sess = create_session()
    limits = db_sess.query(Limits).all()
    limits_add_keyboard = InlineKeyboardMarkup().row(InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Å–∫–ª–∞–¥—ã',callback_data='add_limits')).row(InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu'))
    if not limits:
        await call.message.answer("–ü—Ä–∏–≤–µ—Ç! –°–µ–π—á–∞—Å —è –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –ª–∏–º–∏—Ç–æ–≤ Wildberries. –ù–æ –º–æ–≥—É –Ω–∞—á–∞—Ç—å —ç—Ç–æ –¥–µ–ª–∞—Ç—å 24/7. –ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É.", reply_markup = limits_add_keyboard)
    else:
        message = "–ü—Ä–∏–≤–µ—Ç! –°–µ–π—á–∞—Å —è 24/7 –∏—â—É –ª–∏–º–∏—Ç—ã –Ω–∞ —ç—Ç–∏ —Å–∫–ª–∞–¥—ã:\n\n"
        for limit in limits:
            message += f'{list(google_sheets.warehouses.keys())[list(google_sheets.warehouses.values()).index(limit.warehouse)]}\n'
        await call.message.answer(message, reply_markup = limits_add_keyboard)

async def add_limits(call):
    message = '–ù–∞ –∫–∞–∫–∏–µ —Å–∫–ª–∞–¥—ã –º–Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫–∏?'
    warehouses_keyboard = InlineKeyboardMarkup()
    for i in google_sheets.warehouses.keys():
        warehouses_keyboard.row(InlineKeyboardButton(text=i, callback_data=f'process_limits_warehouse {google_sheets.warehouses[i]}'))
    warehouses_keyboard.row(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='limits_wb')).row(InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu'))
    await call.message.answer(message, reply_markup=warehouses_keyboard)

async def process_limits_warehouse(call):
    warehouse = call.data.split()[1]
    message = '–ö–∞–∫–æ–π –≤–∏–¥ –ø–æ—Å—Ç–∞–≤–∫–∏?'
    warehouses_keyboard = InlineKeyboardMarkup()
    containers = ["–ö–æ—Ä–æ–±–∞", "–ú–æ–Ω–æ–ø–∞–ª–µ—Ç—ã", "–°—É–ø–µ—Ä—Å–µ–π—Ñ"]
    for i in containers:
        warehouses_keyboard.row(InlineKeyboardButton(text=i, callback_data=f'pl_amount {warehouse} {i}'))
    warehouses_keyboard.row(InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–∫–ª–∞–¥', callback_data='add_limits')).row(InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu'))
    await call.message.answer(message, reply_markup=warehouses_keyboard)

async def process_limits_amount(call):
    warehouse,container = call.data.split()[1:]
    message = '–î–∞–ª–µ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ —á–∏—Å–ª–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:\n–£–∫–∞–∂–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ª–∏–º–∏—Ç –≤ —É—Å–ª–æ–≤–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏. –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –≤–∞—à–µ–π –ø–æ—Å—Ç–∞–≤–∫–µ. –≠—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∫–∞–∑–∞–Ω–æ –≤ —Å–∫–æ–±–∫–∞—Ö —Ä—è–¥–æ–º —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —á–∏—Å–ª–æ –Ω–∏–∂–µ üëá'
    await GetLimitAmount.limit_amount.set()
    state = dp.get_current().current_state()
    await state.update_data(warehouse=warehouse)
    await state.update_data(container=container)
    await call.message.answer(message)

async def choose_date(call):
    warehouse, limit_type, amount = call.data.split()[1:]
    text = f"–•–æ—Ä–æ—à–æ, –±—É–¥—É –∏—Å–∫–∞—Ç—å –ª–∏–º–∏—Ç –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É {amount} —à—Ç—É–∫ —Ç–∏–ø–∞ {limit_type} –≤ {list(google_sheets.warehouses.keys())[list(google_sheets.warehouses.values()).index(int(warehouse))]}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–æ–≤ –ª–∏–º–∏—Ç–æ–≤:"
    dates_keyboard = InlineKeyboardMarkup()
    dates = {"–°–µ–≥–æ–¥–Ω—è":0, "–ó–∞–≤—Ç—Ä–∞":1, "–ù–µ–¥–µ–ª—è":7, "–ú–µ—Å—è—Ü":30, "–ò—Å–∫–∞—Ç—å –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ—Ç—Å—è":-1}
    for i in dates.keys():
        dates_keyboard.row(InlineKeyboardButton(text=i, callback_data=f"pl_dates {warehouse} {limit_type} {amount} {dates[i]}"))
    dates_keyboard.row(InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç', callback_data=f"pl_amount {warehouse} {limit_type}")).row(InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu'))
    await call.message.answer(text=text, reply_markup=dates_keyboard)

@dp.message_handler(state=GetLimitAmount.limit_amount)
async def process_limits_amount_confirm(message: types.Message, state):
    if message.text == "–û–¢–ú–ï–ù–ê":
        await state.finish()
        await message.answer('–í—ã –≤ –º–µ–Ω—é',reply_markup = menu_keyboard)
    elif message.text.isdigit():
        state_data = await state.get_data()
        amount = int(message.text)
        text = f"–•–æ—Ä–æ—à–æ, –±—É–¥—É –∏—Å–∫–∞—Ç—å –ª–∏–º–∏—Ç –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É {amount} —à—Ç—É–∫ —Ç–∏–ø–∞ {state_data['container']} –≤ {list(google_sheets.warehouses.keys())[list(google_sheets.warehouses.values()).index(int(state_data['warehouse']))]}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–æ–≤ –ª–∏–º–∏—Ç–æ–≤:"
        dates_keyboard = InlineKeyboardMarkup()
        dates = {"–°–µ–≥–æ–¥–Ω—è":0, "–ó–∞–≤—Ç—Ä–∞":1, "–ù–µ–¥–µ–ª—è":7, "–ú–µ—Å—è—Ü":30, "–ò—Å–∫–∞—Ç—å –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ—Ç—Å—è":-1}
        for i in dates.keys():
            dates_keyboard.row(InlineKeyboardButton(text=i, callback_data=f"pl_dates {state_data['warehouse']} {state_data['container']} {amount} {dates[i]}"))
        dates_keyboard.row(InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç', callback_data=f"pl_amount {state_data['warehouse']} {state_data['container']}")).row(InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu'))
        await message.answer(text=text, reply_markup=dates_keyboard)
        await state.finish()
    else:
        await message.answer('–Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ, –ª–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ "–û–¢–ú–ï–ù–ê" –¥–ª—è –æ—Ç–º–µ–Ω—ã')

async def process_limits_dates(call):
    warehouse, container, amount, time_range = call.data.split()[1:]
    dates = {"–°–µ–≥–æ–¥–Ω—è":0, "–ó–∞–≤—Ç—Ä–∞":1, "–ù–µ–¥–µ–ª—è":7, "–ú–µ—Å—è—Ü":30, "–ò—Å–∫–∞—Ç—å –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ—Ç—Å—è":-1}
    confirm_keyboard = InlineKeyboardMarkup().row(InlineKeyboardButton(text='–î–∞, –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ', callback_data='add_limits')).row(InlineKeyboardButton(text='–°–ø–∞—Å–∏–±–æ, –Ω–µ –Ω—É–∂–Ω–æ', callback_data='main_menu')).row(InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu'))
    message = f"–•–æ—Ä–æ—à–æ. –ë—É–¥—É—Ç —É—Å–∏–ª–µ–Ω–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É {amount} —à—Ç—É–∫ {list(google_sheets.warehouses.keys())[list(google_sheets.warehouses.values()).index(int(warehouse))]} —Ç–∏–ø–∞ {container} –ø–æ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é ¬´{list(dates.keys())[list(dates.values()).index(int(time_range))]}¬ª"
    db_sess = create_session()
    if int(time_range) != -1:
        new_limit = Limits(warehouse=warehouse, type=container, amount=int(amount),time_range= datetime.now() + timedelta(days=int(time_range)))
    else:
        new_limit = Limits(warehouse=warehouse, type=container, amount=int(amount),forever=True)
    db_sess.add(new_limit)
    db_sess.commit()
    db_sess.close()
    await call.message.answer(text=message, reply_markup = confirm_keyboard)

async def review_restored_success(call):
    google_sheets.review_recover(call.data.split()[1], '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –æ—Ç–∑—ã–≤')
    await call.message.answer('–°—Ç–∞—Ç—É—Å –æ—Ç–∑—ã–≤–∞ —Å—Ç–∞–ª "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –æ—Ç–∑—ã–≤".')

async def review_unrestored_needed(call):
    google_sheets.review_recover_and_date(call.data.split()[1], '–Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É')
    await call.message.answer('–°—Ç–∞—Ç—É—Å –æ—Ç–∑—ã–≤–∞ —Å—Ç–∞–ª "–Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É".')

async def book_a_limit(call):
    await call.message.answer("–ü–æ–∫–∞ –º–µ–Ω—è –Ω–µ –Ω–∞—É—á–∏–ª–∏ —ç—Ç–æ –¥–µ–ª–∞—Ç—å. –ü–æ—ç—Ç–æ–º—É –ø–æ–ø—Ä–æ—à—É –í–∞—Å –∑–∞–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ")

commands = {
    'show_product' : show_product,
    'show_marketplace' : show_marketplace,
    'unmutenotification' : unmutenotification,
    'mutenotification' : mutenotification,
    'deletenotification' : deletenotification,
    'answer_review' : answer_review,
    'confirm_answer' : confirm_answer,
    'review_delete_success' : review_delete_success,
    'review_help_needed' : review_help_needed,
    'regional' : regional,
    'limits' : limits,
    'limits_wb' : limits_wb,
    'main_menu' : main_menu,
    'add_limits' : add_limits,
    'process_limits_warehouse' : process_limits_warehouse,
    'pl_amount' : process_limits_amount,
    'pl_dates' : process_limits_dates,
    'review_restored_success' : review_restored_success,
    "review_unrestored_needed" : review_unrestored_needed,
    'book_a_limit' : book_a_limit,
    'cd': choose_date
}


@dp.message_handler(commands=['conversion'])
async def send_conversion_notifications(message=''):
    db_sess = create_session()
    conversions = google_sheets.get_conversions_notifications()
    users = db_sess.query(Users).all()
    for user in users:
        try:
            await bot.send_message(user.id,conversions)
        except (aiogram.utils.exceptions.ChatNotFound, aiogram.utils.exceptions.BotBlocked):
            db_sess.delete(user)
        except aiogram.utils.exceptions.MessageTextIsEmpty:
            break
    db_sess.close()


@dp.message_handler(commands=['supply'])
async def send_supply_notifications(message=''):
    db_sess = create_session()
    supply_notifications = google_sheets.get_supply_notifications()
    users = db_sess.query(Users).all()
    for user in users:
        for supply_notification_place in supply_notifications.keys():
            if len(supply_notifications[supply_notification_place]) > 0:
                message = f'‚ö°Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–¥–µ–ª–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É –Ω–∞ Ozon {supply_notification_place} –≤ —Å–ª–µ–¥—É—é—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ:\n\n'
                for supply in supply_notifications[supply_notification_place]:
                    message += supply
                try:
                    await bot.send_message(user.id,message)
                except (aiogram.utils.exceptions.ChatNotFound, aiogram.utils.exceptions.BotBlocked):
                    db_sess.delete(user)
                except aiogram.utils.exceptions.MessageTextIsEmpty:
                    break
    db_sess.close()

@dp.message_handler(commands=['main'])
async def send_main_notifications(message=''):
    db_sess = create_session()
    notifications = google_sheets.get_updates()
    await bot.send_message(5546230210, str(notifications))
    users = db_sess.query(Users).all()
    for notification_chunk in notifications:
        if type(notification_chunk) == str:
            for user in users:
                try:
                    await bot.send_message(user.id,notification_chunk)
                except (aiogram.utils.exceptions.ChatNotFound, aiogram.utils.exceptions.BotBlocked):
                    db_sess.delete(user)
                except aiogram.utils.exceptions.MessageTextIsEmpty:
                    break
        else:
            for notification in notification_chunk:
                notification = db_sess.query(Notifications).filter(Notifications.text == notification).first()
                for user in users:
                    if str(notification.id) not in user.muted_notifications:
                        try:
                            reply_markup = InlineKeyboardMarkup().add(InlineKeyboardButton(text='üîî',callback_data=f'mutenotification {notification.id} {user.id}'))
                            await bot.send_message(user.id,notification.text,reply_markup=reply_markup)
                        except (aiogram.utils.exceptions.ChatNotFound, aiogram.utils.exceptions.BotBlocked):
                            db_sess.delete(user)
                        except aiogram.utils.exceptions.MessageTextIsEmpty:
                            break
        await asyncio.sleep(60*15)
    db_sess.close()

@dp.message_handler(commands=['test'])
async def send_test_main_notifications(message=''):
    db_sess = create_session()
    notifications = google_sheets.get_updates()
    await bot.send_message(5546230210, str(notifications))
    users = [db_sess.query(Users).get(5546230210)]
    for notification_chunk in notifications:
        if type(notification_chunk) == str:
            for user in users:
                try:
                    await bot.send_message(user.id,notification_chunk)
                except (aiogram.utils.exceptions.ChatNotFound, aiogram.utils.exceptions.BotBlocked):
                    db_sess.delete(user)
                except aiogram.utils.exceptions.MessageTextIsEmpty:
                    break
        else:
            for notification in notification_chunk:
                notification = db_sess.query(Notifications).filter(Notifications.text == notification).first()
                for user in users:
                    if str(notification.id) not in user.muted_notifications:
                        try:
                            reply_markup = InlineKeyboardMarkup().add(InlineKeyboardButton(text='üîî',callback_data=f'mutenotification {notification.id} {user.id}'))
                            await bot.send_message(user.id,notification.text,reply_markup=reply_markup)
                        except (aiogram.utils.exceptions.ChatNotFound, aiogram.utils.exceptions.BotBlocked):
                            db_sess.delete(user)
                        except aiogram.utils.exceptions.MessageTextIsEmpty:
                            break
    db_sess.close()

async def send_limits_notifications():
    db_sess = create_session()
    limits = db_sess.query(Limits).all()
    messages = {}
    users = db_sess.query(Users).all()
    for limit in limits:
        if not limit.forever and limit.time_range < datetime.now() + timedelta(days=-1):
            db_sess.delete(limit)
        else:
            date, amount = await google_sheets.get_warehouse_limits(limit)
            if date:
                messages[limit] = f"üöö  –ú–µ—Å—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥ {list(google_sheets.warehouses.keys())[list(google_sheets.warehouses.values()).index(limit.warehouse)]} –Ω–∞ {amount} –º–µ—Å—Ç —Å —Ç–∏–ø–æ–º {limit.type} –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –¥–∞—Ç—É {date}"
            db_sess.delete(limit)
    if messages:
        for limit in messages.keys():
            for user in users:
                try:
                    keyb = InlineKeyboardMarkup().row(InlineKeyboardButton(text='–î–∞, –∑–∞–π–º–∏ –ø–æ—Å—Ç–∞–≤–∫—É –Ω–∞ —ç—Ç–∏ –¥–∞—Ç—ã', callback_data='book_a_limit')).row(InlineKeyboardButton(text='–ò—â–∏ –¥—Ä—É–≥–∏–µ –¥–∞—Ç—ã', callback_data=f'cd {limit.warehouse} {limit.type} {limit.amount}'))
                    await bot.send_message(user.id,messages[limit],reply_markup=keyb)
                except (aiogram.utils.exceptions.ChatNotFound, aiogram.utils.exceptions.BotBlocked):
                    db_sess.delete(user)
                except aiogram.utils.exceptions.MessageTextIsEmpty:
                    break
    db_sess.commit()
    db_sess.close()

@dp.callback_query_handler(lambda call: True)
async def ans(call):
    await commands[call.data.split()[0]](call)

async def main():
    await dp.start_polling()


async def check_schedule():
    while True:
        await schedule.run_pending()
        await asyncio.sleep(1)


if __name__ == '__main__':
    print('Bot has started')
    loop = asyncio.get_event_loop()
    schedule.every().day.at("11:00").do(send_main_notifications)
    schedule.every().day.at("13:00").do(send_supply_notifications)
    schedule.every(5).minutes.do(send_limits_notifications)
    schedule.every().monday.at("10:00").do(send_conversion_notifications)
    schedule.every().thursday.at("10:00").do(send_conversion_notifications)
    loop.create_task(check_schedule())
    loop.run_until_complete(main())